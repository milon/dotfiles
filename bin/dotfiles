#!/bin/zsh

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

ARROW="âžœ"
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

# load config
source "$(dirname "$0")/../config.sh"
export support_dir="$dotfiles_dir/support"

source "$support_dir/functions.sh"

sub_help () {
    ascii_art
    echo
    echo -e "$ARROW Usage: ${YELLOW}$BIN_NAME <command>${NC}"
    echo
    echo "${GREEN}Commands:${NC}"
    echo "   ${YELLOW}help${NC}             This help message"
    echo "   ${YELLOW}update${NC}           Update packages and pkg managers (brew, mac app store, commposer)"
    echo "   ${YELLOW}clean${NC}            Clean up caches (brew, npm, composer)"
    echo "   ${YELLOW}symlinks${NC}         Run symlinks script"
    echo "   ${YELLOW}brew${NC}             Run brew script"
    echo "   ${YELLOW}node${NC}             Run node setup script"
    echo "   ${YELLOW}python${NC}           Run python setup script"
    echo "   ${YELLOW}java${NC}             Run java setup script"
    echo "   ${YELLOW}ruby${NC}             Run ruby setup script"
    echo "   ${YELLOW}composer${NC}         Run composer setup script"
    echo "   ${YELLOW}valet${NC}            Run valet script"
    echo "   ${YELLOW}git${NC}              Run git config script"
    echo "   ${YELLOW}clone${NC}            Run git clone script"
    echo "   ${YELLOW}pull${NC}             Run git pull script to update all repos"
    echo "   ${YELLOW}mac${NC}              Run MacOS defaults script"
    echo "   ${YELLOW}xcode${NC}            Run XCode script"
    echo "   ${YELLOW}vim${NC}              Run vim script"
    echo "   ${YELLOW}neovim${NC}           Run neovim script"
    echo
}

sub_update () {
    echo "Update brew"
    brew update && brew upgrade

    echo ""
    echo "Update mac app store softwares"
    mas upgrade

    echo ""
    echo "Update composer and it's global dependencies"
    composer self-update && composer global update

    echo ""
    echo -e "${GREEN}$ARROW Success! Update command finished.${NC}"
}

sub_clean () {
    brew cleanup
    npm cache clean --force
    composer clear-cache
    echo -e "${GREEN}$ARROW Success! Clean command finished.${NC}"
}

sub_symlinks () {
    . "$support_dir/sym_links.sh"
    echo -e "${GREEN}$ARROW Success! Symlinks command finished.${NC}"
}

sub_brew () {
    . "$support_dir/brew.sh"
    echo -e "${GREEN}$ARROW Success! Brew command finished.${NC}"
}

sub_node () {
    . "$support_dir/node.sh"
    echo -e "${GREEN}$ARROW Success! Node setup command finished.${NC}"
}

sub_python () {
    . "$support_dir/python.sh"
    echo -e "${GREEN}$ARROW Success! Python setup command finished.${NC}"
}

sub_java () {
    . "$support_dir/java.sh"
    echo -e "${GREEN}$ARROW Success! Java setup command finished.${NC}"
}

sub_ruby () {
    . "$support_dir/ruby.sh"
    echo -e "${GREEN}$ARROW Success! Ruby setup command finished.${NC}"
}

sub_composer () {
    . "$support_dir/composer.sh"
    echo -e "${GREEN}$ARROW Success! Composer setup command finished.${NC}"
}

sub_valet () {
    . "$support_dir/valet.sh"
    echo -e "${GREEN}$ARROW Success! Valet command finished.${NC}"
}

sub_git () {
    . "$support_dir/git.sh"
    echo -e "${GREEN}$ARROW Success! Git config command finished.${NC}"
}

sub_pull () {
    . "$support_dir/pull.sh"
    echo -e "${GREEN}$ARROW Success! Git pull command finished.${NC}"
}

sub_clone () {
    . "$support_dir/git_clone.sh"
    echo -e "${GREEN}$ARROW Success! Git clone command finished.${NC}"
}

sub_mac () {
    . "$support_dir/mac_settings.sh"
    echo -e "${GREEN}$ARROW Success! MacOS settings command finished.${NC}"
}

sub_xcode () {
    . "$support_dir/xcode.sh"
    echo -e "${GREEN}$ARROW Success! Xcode command finished.${NC}"
}

sub_vim () {
    . "$support_dir/dependencies.sh"
    . "$support_dir/vim.sh"
    echo -e "${GREEN}$ARROW Success! Vim command finished.${NC}"
}

sub_neovim () {
    . "$support_dir/dependencies.sh"
    . "$support_dir/neovim.sh"
    echo -e "${GREEN}$ARROW Success! Neovim command finished.${NC}"
}

case $COMMAND_NAME in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${COMMAND_NAME} $@
        if [ $? = 127 ]; then
            echo -e "${RED}$ARROW Error: '$COMMAND_NAME' is not a known command or has errors.${NC}" >&2
            sub_help
            exit 1
        fi
        ;;
esac
